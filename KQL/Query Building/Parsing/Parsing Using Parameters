//# How to parse 
// To parse a field from one field into one or more fields/columns, you need to find paramaters that are going to be consistent across entries.
// This is ideal for when you need to create alerts based on events from a log ingestion tool or tool that doesn't have a very good parser
// and is condencing multiple fields into one.

TableName 
|  parse  Field with * "start point" newField_name "end point" null  

#Breakdown#
TableName         //replace this with the table your events are coming into
parse             //the command
Field             //replace with the name of the field/column that has the data you need to parse out into another field/column(s)
with *            //this tells it to search through the field until it reaches the start point
"start point"     //this is where you put the parameter
newField_name     //replace this with whatever you want the new field/column to be named
"end point"       //this is where you put the end of the parameter. eg ";"
null              //this will dump anything that's left in the field **this isn't always necessary, but I have found issues by not having it

//**for parameters that contain quotations (")**
// Use a backslash before a quotation mark so the quotation will be included in the search instead of closing out the parameter
TableName 
|  parse  Field with * "\"" newField_name "\"" null  

#Example entry in a Syslog table#
"142>1 2025-05-12T21:17:55.004Z devicename.example.com eventslog - ID72 [exampleUSERID@11562 iut="8" eventSource="System" eventID="4087"]"

#Example of how you might parse it#
Syslog
|  parse  SyslogMessage with * " " TimeGenerated "Z" null
|  parse  SyslogMessage with * "Z " DeviceName " " null  
|  parse  SyslogMessage with * "[" UserID " " null  
|  parse  SyslogMessage with * "iut=\"" IUT "\"" null  
|  parse  SyslogMessage with * "eventSource=\"" eventSource "\"" null 
|  parse  SyslogMessage with * "eventID=\"" eventID "\"" null 
| distinct TimeGenerated, DeviceName, UserID, IUT, eventSource, eventID
